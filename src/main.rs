#![no_std] // Cant use std libraries as that depends on an overhanging Operating System
#![no_main] // Define our own entry point

static HELLO: &[u8] = b"HELL YEAH I'M AN OSDEV!"; // String to be loaded into the VGA buffer

// EntryPointFunction -> NEVER RETURNS
#[no_mangle]
pub extern "C" fn _start() -> ! { // Entry Point => Made this way so it is not some weird autogenerated garbage
    let vga_buffer = 0xb8000 as *mut u8; // VGA buffer is at 0xb8000

    for (i, &byte) in HELLO.iter().enumerate() { // Write each byte of the string to the VGA buffer
        unsafe {
            *vga_buffer.offset(i as isize * 2) = byte;
            *vga_buffer.offset(i as isize * 2 + 1) = 0xb;
        }
    }
    
    loop {}
}

// Panic handler rust magic stuff
use core::panic::PanicInfo;

#[panic_handler]
fn panic(_info: &PanicInfo) -> ! {
    loop {}
}